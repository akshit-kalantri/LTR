# -*- coding: utf-8 -*-
"""csvtodata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UXL13boqAyCq0zVcp2UkOOKDuXpDpf9V
"""

!pip install -q tensorflow-ranking

from typing import Dict, Tuple
import tensorflow as tf
import tensorflow_ranking as tfr
import pandas as pd
import numpy as np

data = pd.read_csv('ratings_Beauty.csv')

data.head()

dataset = tf.data.experimental.make_csv_dataset('ratings_Beauty.csv', batch_size=1000)
iterator = dataset.as_numpy_iterator()

dataset = dataset.map(lambda x: {
    "UserId": x["UserId"],
    "ProductId": x["ProductId"],
    "Rating": x["Rating"]
})

users = dataset.map(lambda x: x["UserId"])
prod = dataset.map(lambda x: x["ProductId"])

users_vocabulary = tf.keras.layers.experimental.preprocessing.StringLookup(
    mask_token=None)
users_vocabulary.adapt(users.batch(1000))

prod_vocabulary = tf.keras.layers.experimental.preprocessing.StringLookup(
    mask_token=None)
prod_vocabulary.adapt(prod.batch(1000))

key_func = lambda x: users_vocabulary(x["user_id"])
reduce_func = lambda key, dataset: dataset.batch(100)
ds_train = ratings.group_by_window(
    key_func=key_func, reduce_func=reduce_func, window_size=100)

for x in ds_train.take(1):
  for key, value in x.items():
    print(f"Shape of {key}: {value.shape}")
    print(f"Example values of {key}: {value[:5].numpy()}")
    print()

def _features_and_labels(
    x: Dict[str, tf.Tensor]) -> Tuple[Dict[str, tf.Tensor], tf.Tensor]:
  labels = x.pop("Rating")
  return x, labels


ds_train = ds_train.map(_features_and_labels)

ds_train = ds_train.apply(
    tf.data.experimental.dense_to_ragged_batch(batch_size=32))

for x, label in ds_train.take(1):
  for key, value in x.items():
    print(f"Shape of {key}: {value.shape}")
    print(f"Example values of {key}: {value[:3, :3].numpy()}")
    print()
  print(f"Shape of label: {label.shape}")
  print(f"Example values of label: {label[:3, :3].numpy()}")

